// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mapreduce "github.com/klimenkoOleg/large-file-processing-go/internal/domain/mapreduce"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateOutputFile provides a mock function with given fields: name
func (_m *Storage) CreateOutputFile(name string) (mapreduce.OutputFile, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateOutputFile")
	}

	var r0 mapreduce.OutputFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (mapreduce.OutputFile, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) mapreduce.OutputFile); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapreduce.OutputFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenInputFile provides a mock function with given fields: name
func (_m *Storage) OpenInputFile(name string) (mapreduce.InputFile, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for OpenInputFile")
	}

	var r0 mapreduce.InputFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (mapreduce.InputFile, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) mapreduce.InputFile); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapreduce.InputFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
